-- Setup. DO NOT REMOVE.
.headers on
.separator ','

DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS movie_cast;
DROP VIEW IF EXISTS good_collaboration;
DROP TABLE IF EXISTS movie_overview;

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]
CREATE TABLE movies(
    id integer,
    name text,
    score integer
);

CREATE TABLE movie_cast(
    movie_id integer,
    cast_id integer,
    cast_name text
 
);


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]

.import movie-name-score.txt movies
.import movie-cast.txt movie_cast

select '';

-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
SELECT COUNT(*) FROM movies;
SELECT COUNT(*) FROM movie_cast;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]

CREATE INDEX scores_index ON movies (score);
CREATE INDEX cast_index ON movie_cast (cast_id);
CREATE INDEX movie_index ON movies (id);
select '';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c) Calculate a proportion

-- [insert your SQL statement(s) BELOW this line]

SELECT ROUND(100.0*COUNT(*)/(SELECT COUNT(*) AS total FROM movies),1) AS prop
  FROM movies
 WHERE score > 50;
select '';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Find the highest scoring movies

-- [insert your SQL statement(s) BELOW this line]

SELECT id, name, score
  FROM movies
 ORDER BY 3 DESC, 2
 LIMIT 7;
select '';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Find the most prolific actors

-- [insert your SQL statement(s) BELOW this line]

SELECT cast_id, cast_name, COUNT(*) AS movie_count
  FROM movie_cast
 GROUP BY 1, 2
 ORDER BY 3 DESC, 2
 LIMIT 5;
select '';


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Get high scoring actors

-- [insert your SQL statement(s) BELOW this line]

SELECT a.cast_id, a.cast_name, AVG(b.score) AS average_score
  FROM movie_cast a
  JOIN (SELECT * FROM movies WHERE score >= 50) b
    ON a.movie_id = b.id
  GROUP BY 1, 2
  HAVING COUNT(a.movie_id) > 2
  ORDER BY 3 DESC, 2 
  LIMIT 10;
select '';
  

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g) Creating views

-- [insert your SQL statement(s) BELOW this line]

CREATE VIEW good_collaboration AS 

SELECT *
  FROM(
      SELECT c.cast_member_id1, 
            c.cast_member_id2,
            COUNT(DISTINCT c.movie_id) AS movie_count,
            AVG(d.score) AS average_movie_score
        FROM(
              SELECT a.movie_id, a.cast_id AS cast_member_id1, b.cast_id AS cast_member_id2 
                FROM movie_cast a
                JOIN movie_cast b
                  ON a.movie_id = b.movie_id
                AND a.cast_id < b.cast_id
            )c
        JOIN movies d
          ON c.movie_id = d.id
      GROUP BY 1, 2
  )a
 WHERE movie_count >= 3
   AND average_movie_score >= 40;

select '';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
PRAGMA table_info(good_collaboration);
SELECT AVG(average_movie_score) FROM good_collaboration;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Find the best collaborators

-- [insert your SQL statement(s) BELOW this line]

SELECT a.cast_id, b.cast_name, MAX(a.collaboration_score) AS collaboration_score
  FROM(
      SELECT cast_member_id1 AS cast_id, AVG(average_movie_score) AS collaboration_score
        FROM good_collaboration
        GROUP BY 1
      UNION
      SELECT cast_member_id2 AS cast_id, AVG(average_movie_score) AS collaboration_score
        FROM good_collaboration
        GROUP BY 1
      )a
  JOIN movie_cast b
    ON a.cast_id = b.cast_id
  GROUP BY 1, 2
  ORDER BY 3 DESC, 2
  LIMIT 5;
select '';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i) Create FTS table and import data

-- [insert your SQL statement(s) BELOW this line]

CREATE VIRTUAL TABLE movie_overview USING fts3(
    id integer primary key,
    name text,
    year integer,
    overview text,
    popularity decimal
);
.import movie-overview.txt movie_overview
select '';

-- [insert your SQL statement(s) ABOVE this line]

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.1) Count movies with "fight"

-- [insert your SQL statement(s) BELOW this line]

SELECT COUNT(*) AS count_overview
  FROM movie_overview
 WHERE overview MATCH 'fight';
select '';


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.2) List movies with "love" and "story" nearby

-- [insert your SQL statement(s) BELOW this line]

SELECT a.id
  FROM (SELECT id FROM movie_overview WHERE overview MATCH 'love AND story') a
  JOIN
       (SELECT id FROM movie_overview WHERE overview MATCH 'love NEAR/5 story') b
    ON a.id = b.id;
select '';


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --